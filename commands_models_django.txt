#Создать двух пользователей (с помощью метода User.objects.create_user('username')).

from news_portal_dev.models import *
user1 = User.objects.create_user(username='user1')
user1.save()
user2 = User.objects.create_user(username='user2')
user2.save()

#Создать два объекта модели Author, связанные с пользователями.

author1 = Author.objects.create(user=user1)
author2 = Author.objects.create(user=user2)

#Добавить 4 категории в модель Category

cat1 = Category.objects.create(category='Политика')
cat2 = Category.objects.create(category='Экономика')
cat3 = Category.objects.create(category='Спорт')
cat4 = Category.objects.create(category='Юмор')

#Добавить 2 статьи и 1 новость

from django.utils import timezone

author = Author.objects.get(id=1)
category = Category.objects.get(id=1)

post_art = Post.objects.create(
    author=author,
    post_type='article',
    timestamp=timezone.now(),
    title='1ая статья',
    content='Это классная статья'
)

post_art1 = Post.objects.create(
    author=author,
    post_type='article',
    timestamp=timezone.now(),
    title='2ая статья',
    content='Это еще классная статья'
)

post_news = Post.objects.create(
    author=author,
    post_type='news',
    timestamp=timezone.now(),
    title='1ая новость',
    content='Дела отлично'
)

#Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

categories = Category.objects.filter(id__in=[1, 2, 3])


post_art.category.add(categories.get(id=1), categories.get(id=2))
post_art1.category.add(categories.get(id=3))
post_news.category.add(categories.get(id=2))

#Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

post = Post.objects.get(id=1)
user = User.objects.get(id=3)
com1 = Comment.objects.create(post=post, user=user,text_content = '1ый коммент. Круто',timestamp=timezone.now())
post = Post.objects.get(id=2)
com2 = Comment.objects.create(post=post, user=user,text_content = '2ый коммент. Круто',timestamp=timezone.now())
post = Post.objects.get(id=3)
com3 = Comment.objects.create(post=post, user=user,text_content = '3ый коммент. Круто',timestamp=timezone.now())
post = Post.objects.get(id=1)
com4 = Comment.objects.create(post=post, user=user,text_content = '4ый коммент. Круто',timestamp=timezone.now())

#Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

rating1 = Post.objects.get(id=1)
rating1.like()
rating1.like()
rating2 = Post.objects.get(id=2)
rating2.dislike()
rating3 = Comment.objects.get(id=1)
rating3.like()
rating4 = Comment.objects.get(id=2)
rating4.dislike()
rating4.dislike()

#Обновить рейтинги пользователей

update1 = Author.objects.get(id=1)
update1.update_rating()
update2 = Author.objects.get(id=2)
update2.update_rating()

#Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

user_rating = Author.objects.order_by("-_rating_user")
user_rating.values("user__username", "_rating_user").first()

#Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.


best_article = Post.objects.filter(post_type='article').order_by('-_rating')
best_article.values("timestamp", "author_id__user__username", "_rating", "title").first()
best_article_preview = Post.objects.get(id=1)
best_article_preview.preview()

#Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

comments_view = Comment.objects.filter(post_id = 1)
comments_view.values("timestamp", "user_id__username", "_rating", "text_content")
